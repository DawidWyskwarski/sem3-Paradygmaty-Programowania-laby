zadanie 1

let tri_area((a: float),(b: float),(c: float))=
  if abs_float (b -. c) < a && b +. c > a then
    let p = (a +. b +. c) /. 2.0 in
    let area = sqrt (p *. (p -. a) *. (p -. b) *. (p -. c)) in
    area
  else
    invalid_arg "Invalid triangle sides";;

let area = tri_area(12.0,13.0,5.0);;
print_float area;;

zadanie 2

let sum((n: int), (x:float))=
    let rec sum1((n:int),(x:float),(i:float),(nominator:float),(denominator:float),(s:float))=
	if i <= float_of_int(n) then
	    sum1(n,x,i+.1.0, (-1.0) *. nominator *. x, denominator*.(i+.1.0), s +. (nominator /. denominator) )
	else s

    in sum1(n,x,1.0,-1.0 *. x, 1.0 ,0.0)

let suma = sum(4, 3.0);;
print_float(suma);;

zadanie 3

let moreThanR((r:float))=
    let rec moreThanR1((r:float),(i:float),(s:float))=
	if s <= r then 
	    moreThanR1(r,i +. 1.0, s +. (1.0 /. i) ) 
	else i-1
    in moreThanR1(r, 1.0 ,0.0)

let test1 = moreThanR(1.5);;
print_float(test1);;

zadanie 4

let min li = 
  if li = [] then raise (Failure "List is empty")
  else 
    let rec min1 li min =
      if li = [] then min
      else 
        let cur = List.hd li in
        if min > cur then 
          min1 (List.tl li) cur
        else 
          min1 (List.tl li) min
    in
    min1 (List.tl li) (List.hd li)

let min_val = min [5.0; 3.0; 9.0; 1.0; 4.0];;
print_float min_val;;

zadanie 5

let listSplit li = 
  
  let rec listSplit1 li positive negative =
    if li = [] then 
	let result = [negative;positive] in
	result
    else 
	let cur = List.hd li in
	if cur < 0 then listSplit1 (List.tl li) (positive) (negative @ [cur])
	else listSplit1 (List.tl li) (positive @ [cur]) (negative)

  in listSplit1 li [] [];;

 