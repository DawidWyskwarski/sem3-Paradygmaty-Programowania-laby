type 'a bt = Empty | Node of 'a * 'a bt * 'a bt

(* 1 *)
let equal tr1 tr2 =
  tr1 = tr2

(* 2 *)
let rec subeq (t1,t2) =
  if t1 = t2 then
    true
  else match t1 with
    | Empty -> false
    | Node(_,left,right) -> subeq(left,t2) || subeq(right,t2)

(* 3 *)
let rec countSub (t1,t2) =
  if t1 = t2 then
    1
  else match t1 with
    | Empty -> 0
    | Node(_,left,right) -> countSub(left,t2) + countSub(right,t2)

let t1 = Node(1,
              Node(2,
                   Node(2,Empty,Empty),
                   Node(2,Empty,Empty)),
              Node(3,
                   Node(2,Empty,Empty),
                   Node(2,Empty,Empty)))

let t2 = t1;;

countSub(t1,t2)